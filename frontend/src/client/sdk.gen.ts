// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetAllUsersData, GetAllUsersResponse, CreateUserData, CreateUserResponse, GetAdminUserDetailData, GetAdminUserDetailResponse, UpdateUserData, UpdateUserResponse, DeleteUserData, DeleteUserResponse, AuthenticationLoginUserData, AuthenticationLoginUserResponse, AuthenticationRefreshAccessTokenData, AuthenticationRefreshAccessTokenResponse, RegisterNewUserData, RegisterNewUserResponse, GetCurrentUserResponse, ChangePasswordData, ChangePasswordResponse, DeleteCurrentUserResponse, AuthenticationLogoutData, AuthenticationLogoutResponse, AuthenticationRecoverPasswordData, AuthenticationRecoverPasswordResponse, AuthenticationResetPasswordData, AuthenticationResetPasswordResponse, CustomModulesGetStatsResponse, CustomModulesGetAdminDashboardResponse, CustomModulesGetErrorsResponse, OauthLoginsGetOauthUrlsResponse, OauthLoginsGoogleLoginResponse, OauthLoginsGoogleAuthCallbackResponse, OauthLoginsFacebookLoginResponse, OauthLoginsFacebookAuthCallbackResponse, UpdateCurrentUserData, UpdateCurrentUserResponse, GetUserByIdData, GetUserByIdResponse, UtilitiesTestEmailData, UtilitiesTestEmailResponse, UtilitiesHealthCheckResponse } from './types.gen';

export class AdminService {
    /**
     * Read Users
     * Retrieve a list of all users (Admin only).
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static getAllUsers(data: GetAllUsersData = {}): CancelablePromise<GetAllUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/users',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create a new user (Admin only).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: CreateUserData): CancelablePromise<CreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/admin/users',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Admin User Detail
     * Retrieve details of a specific user by ID (Admin only).
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static getAdminUserDetail(data: GetAdminUserDetailData): CancelablePromise<GetAdminUserDetailResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/users/detail/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user's details (Admin only).
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UpdateUserData): CancelablePromise<UpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user by ID (Admin only).
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: DeleteUserData): CancelablePromise<DeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/admin/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class AuthenticationService {
    /**
     * Login User
     * OAuth2 login that returns an access token and refresh token.
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static authenticationLoginUser(data: AuthenticationLoginUserData): CancelablePromise<AuthenticationLoginUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/login',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Refresh Access Token
     * Verify refresh token and issue a new access token with a new refresh token.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static authenticationRefreshAccessToken(data: AuthenticationRefreshAccessTokenData): CancelablePromise<AuthenticationRefreshAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/token/refresh',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Public endpoint to register a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerNewUser(data: RegisterNewUserData): CancelablePromise<RegisterNewUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/register',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get details of the currently logged-in user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static getCurrentUser(): CancelablePromise<GetCurrentUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/auth/profile'
        });
    }
    
    /**
     * Update Password
     * Update the password for the currently logged-in user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static changePassword(data: ChangePasswordData): CancelablePromise<ChangePasswordResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/auth/password/update',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User Me
     * Delete the currently logged-in user account.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteCurrentUser(): CancelablePromise<DeleteCurrentUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/auth/profile/delete'
        });
    }
    
    /**
     * Logout
     * Revoke the provided refresh token to log the user out.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static authenticationLogout(data: AuthenticationLogoutData): CancelablePromise<AuthenticationLogoutResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/token/revoke',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password
     * Send password recovery email if the user exists.
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static authenticationRecoverPassword(data: AuthenticationRecoverPasswordData): CancelablePromise<AuthenticationRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/password/recover/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password using a valid token.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static authenticationResetPassword(data: AuthenticationResetPasswordData): CancelablePromise<AuthenticationResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/password/reset',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class CustomModulesService {
    /**
     * Get Stats
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static customModulesGetStats(): CancelablePromise<CustomModulesGetStatsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/reports/stats'
        });
    }
    
    /**
     * Get Admin Dashboard
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static customModulesGetAdminDashboard(): CancelablePromise<CustomModulesGetAdminDashboardResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/dashboard'
        });
    }
    
    /**
     * Get Errors
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static customModulesGetErrors(): CancelablePromise<CustomModulesGetErrorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/errors'
        });
    }
    
}

export class OauthLoginsService {
    /**
     * Get Oauth Urls
     * Return OAuth login URLs dynamically for the frontend.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static oauthLoginsGetOauthUrls(): CancelablePromise<OauthLoginsGetOauthUrlsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/oauth/urls'
        });
    }
    
    /**
     * Google Login
     * Redirect the user to Google OAuth for authentication.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static oauthLoginsGoogleLogin(): CancelablePromise<OauthLoginsGoogleLoginResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/oauth/google/auth'
        });
    }
    
    /**
     * Google Auth Callback
     * Handle Google OAuth callback and return a JWT token for API clients or redirect web users.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static oauthLoginsGoogleAuthCallback(): CancelablePromise<OauthLoginsGoogleAuthCallbackResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/oauth/google/auth/callback'
        });
    }
    
    /**
     * Facebook Login
     * Redirect the user to Facebook OAuth for authentication.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static oauthLoginsFacebookLogin(): CancelablePromise<OauthLoginsFacebookLoginResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/oauth/facebook/auth'
        });
    }
    
    /**
     * Facebook Auth Callback
     * Handle Facebook OAuth callback and return a JWT token.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static oauthLoginsFacebookAuthCallback(): CancelablePromise<OauthLoginsFacebookAuthCallbackResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/oauth/facebook/auth/callback'
        });
    }
    
}

export class UsersService {
    /**
     * Update User Me
     * Update the profile of the currently logged-in user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateCurrentUser(data: UpdateCurrentUserData): CancelablePromise<UpdateCurrentUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Retrieve details of a user by ID (Only if it's the current user).
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static getUserById(data: GetUserByIdData): CancelablePromise<GetUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilitiesService {
    /**
     * Test Email
     * Send a test email (Admin Only).
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static utilitiesTestEmail(data: UtilitiesTestEmailData): CancelablePromise<UtilitiesTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * Check if the API is running.
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static utilitiesHealthCheck(): CancelablePromise<UtilitiesHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}