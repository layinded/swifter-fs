// This file is auto-generated by @hey-api/openapi-ts

export type Body_Authentication_login_user = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type Product = {
    name: string;
    description?: (string | null);
    price: number;
    stock: number;
    id?: string;
};

export type ProductCreate = {
    name: string;
    description?: (string | null);
    price: number;
    stock: number;
};

export type ProductUpdate = {
    name?: (string | null);
    description?: (string | null);
    price?: (number | null);
    stock?: (number | null);
};

export type Token = {
    access_token: string;
    refresh_token?: (string | null);
    token_type?: string;
};

export type TokenRefreshRequest = {
    refresh_token: string;
};

export type TranslationCreate = {
    language_code: string;
    key: string;
    value: string;
};

export type TranslationCreateSchema = {
    /**
     * Language code (e.g., 'en', 'cs')
     */
    language_code: string;
    /**
     * Translation key
     */
    key: string;
    /**
     * Translation value
     */
    value: string;
};

export type TranslationPublic = {
    language_code: string;
    key: string;
    value: string;
    id: string;
};

export type TranslationResponse = {
    message: string;
    translation: TranslationPublic;
};

export type TranslationUpdate = {
    language_code?: (string | null);
    key?: (string | null);
    value?: (string | null);
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    preferred_language?: string;
    password?: (string | null);
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    preferred_language: string;
    id: string;
    auth_provider: string;
    avatar_url?: (string | null);
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    preferred_language?: string;
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
    preferred_language?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type GetAllUsersData = {
    limit?: number;
    skip?: number;
};

export type GetAllUsersResponse = (UsersPublic);

export type CreateUserData = {
    requestBody: UserCreate;
};

export type CreateUserResponse = (UserPublic);

export type GetAdminUserDetailData = {
    userId: string;
};

export type GetAdminUserDetailResponse = (UserPublic);

export type UpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UpdateUserResponse = (UserPublic);

export type DeleteUserData = {
    userId: string;
};

export type DeleteUserResponse = (Message);

export type CustomModulesCreateProductData = {
    requestBody: ProductCreate;
};

export type CustomModulesCreateProductResponse = (Product);

export type CustomModulesReadAllProductsData = {
    limit?: number;
    skip?: number;
};

export type CustomModulesReadAllProductsResponse = (Array<Product>);

export type CustomModulesReadProductByIdData = {
    productId: string;
};

export type CustomModulesReadProductByIdResponse = (Product);

export type CustomModulesUpdateProductData = {
    productId: string;
    requestBody: ProductUpdate;
};

export type CustomModulesUpdateProductResponse = (Product);

export type CustomModulesDeleteProductData = {
    productId: string;
};

export type CustomModulesDeleteProductResponse = (unknown);

export type AuthenticationLoginUserData = {
    formData: Body_Authentication_login_user;
};

export type AuthenticationLoginUserResponse = (Token);

export type AuthenticationRefreshAccessTokenData = {
    requestBody: TokenRefreshRequest;
};

export type AuthenticationRefreshAccessTokenResponse = (Token);

export type RegisterNewUserData = {
    requestBody: UserRegister;
};

export type RegisterNewUserResponse = (UserPublic);

export type GetCurrentUserResponse = (UserPublic);

export type ChangePasswordData = {
    requestBody: UpdatePassword;
};

export type ChangePasswordResponse = (Message);

export type DeleteCurrentUserResponse = (Message);

export type AuthenticationLogoutData = {
    requestBody: TokenRefreshRequest;
};

export type AuthenticationLogoutResponse = (unknown);

export type AuthenticationRecoverPasswordData = {
    email: string;
};

export type AuthenticationRecoverPasswordResponse = (Message);

export type AuthenticationResetPasswordData = {
    requestBody: NewPassword;
};

export type AuthenticationResetPasswordResponse = (Message);

export type CustomModulesGetStatsResponse = (unknown);

export type CustomModulesGetAdminDashboardResponse = (unknown);

export type CustomModulesGetErrorsResponse = (unknown);

export type CustomModulesCreateProduct1Data = {
    requestBody: ProductCreate;
};

export type CustomModulesCreateProduct1Response = (Product);

export type CustomModulesReadAllProducts1Data = {
    limit?: number;
    skip?: number;
};

export type CustomModulesReadAllProducts1Response = (Array<Product>);

export type CustomModulesReadProductById1Data = {
    productId: string;
};

export type CustomModulesReadProductById1Response = (Product);

export type CustomModulesUpdateProduct1Data = {
    productId: string;
    requestBody: ProductUpdate;
};

export type CustomModulesUpdateProduct1Response = (Product);

export type CustomModulesDeleteProduct1Data = {
    productId: string;
};

export type CustomModulesDeleteProduct1Response = (unknown);

export type CreateTranslationData = {
    requestBody: TranslationCreate;
};

export type CreateTranslationResponse = (TranslationResponse);

export type GetTranslationsData = {
    languageCode: string;
};

export type GetTranslationsResponse = (Array<TranslationPublic>);

export type GetTranslationData = {
    key: string;
    languageCode: string;
};

export type GetTranslationResponse = (TranslationPublic);

export type UpdateTranslationData = {
    requestBody: TranslationUpdate;
    translationId: string;
};

export type UpdateTranslationResponse = (TranslationResponse);

export type DeleteTranslationData = {
    translationId: string;
};

export type DeleteTranslationResponse = (unknown);

export type GetBulkTranslationsData = {
    languages: Array<(string)>;
};

export type GetBulkTranslationsResponse = ({
    [key: string]: {
        [key: string]: (string);
    };
});

export type BulkInsertTranslationsData = {
    requestBody: Array<TranslationCreateSchema>;
};

export type BulkInsertTranslationsResponse = ({
    [key: string]: unknown;
});

export type OauthLoginsGetOauthUrlsResponse = (unknown);

export type OauthLoginsGoogleLoginResponse = (unknown);

export type OauthLoginsGoogleAuthCallbackResponse = (unknown);

export type OauthLoginsFacebookLoginResponse = (unknown);

export type OauthLoginsFacebookAuthCallbackResponse = (unknown);

export type UpdateCurrentUserData = {
    requestBody: UserUpdateMe;
};

export type UpdateCurrentUserResponse = (UserPublic);

export type GetUserByIdData = {
    userId: string;
};

export type GetUserByIdResponse = (UserPublic);

export type UtilitiesTestEmailData = {
    emailTo: string;
};

export type UtilitiesTestEmailResponse = (Message);

export type UtilitiesHealthCheckResponse = (boolean);