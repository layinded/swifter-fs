// This file is auto-generated by @hey-api/openapi-ts

export type Body_Authentication_login_user = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type Token = {
    access_token: string;
    refresh_token?: (string | null);
    token_type?: string;
};

export type TokenRefreshRequest = {
    refresh_token: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
    auth_provider: string;
    avatar_url?: (string | null);
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type GetAllUsersData = {
    limit?: number;
    skip?: number;
};

export type GetAllUsersResponse = (UsersPublic);

export type CreateUserData = {
    requestBody: UserCreate;
};

export type CreateUserResponse = (UserPublic);

export type GetAdminUserDetailData = {
    userId: string;
};

export type GetAdminUserDetailResponse = (UserPublic);

export type UpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UpdateUserResponse = (UserPublic);

export type DeleteUserData = {
    userId: string;
};

export type DeleteUserResponse = (Message);

export type AuthenticationLoginUserData = {
    formData: Body_Authentication_login_user;
};

export type AuthenticationLoginUserResponse = (Token);

export type AuthenticationRefreshAccessTokenData = {
    requestBody: TokenRefreshRequest;
};

export type AuthenticationRefreshAccessTokenResponse = (Token);

export type RegisterNewUserData = {
    requestBody: UserRegister;
};

export type RegisterNewUserResponse = (UserPublic);

export type GetCurrentUserResponse = (UserPublic);

export type ChangePasswordData = {
    requestBody: UpdatePassword;
};

export type ChangePasswordResponse = (Message);

export type DeleteCurrentUserResponse = (Message);

export type AuthenticationLogoutData = {
    requestBody: TokenRefreshRequest;
};

export type AuthenticationLogoutResponse = (unknown);

export type AuthenticationRecoverPasswordData = {
    email: string;
};

export type AuthenticationRecoverPasswordResponse = (Message);

export type AuthenticationResetPasswordData = {
    requestBody: NewPassword;
};

export type AuthenticationResetPasswordResponse = (Message);

export type CustomModulesGetStatsResponse = (unknown);

export type CustomModulesGetAdminDashboardResponse = (unknown);

export type CustomModulesGetErrorsResponse = (unknown);

export type OauthLoginsGetOauthUrlsResponse = (unknown);

export type OauthLoginsGoogleLoginResponse = (unknown);

export type OauthLoginsGoogleAuthCallbackResponse = (unknown);

export type OauthLoginsFacebookLoginResponse = (unknown);

export type OauthLoginsFacebookAuthCallbackResponse = (unknown);

export type UpdateCurrentUserData = {
    requestBody: UserUpdateMe;
};

export type UpdateCurrentUserResponse = (UserPublic);

export type GetUserByIdData = {
    userId: string;
};

export type GetUserByIdResponse = (UserPublic);

export type UtilitiesTestEmailData = {
    emailTo: string;
};

export type UtilitiesTestEmailResponse = (Message);

export type UtilitiesHealthCheckResponse = (boolean);